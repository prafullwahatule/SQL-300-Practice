-- A. Complex Joins & Multi-table Queries (Q1â€“Q15)

-- Q1. Show all orders with customer name, pizza name, employee (delivery boy).
SELECT 
    o.order_id, 
    CONCAT(c.first_name, ' ', c.last_name) AS FullName, 
    p.pizza_name, 
    e.name AS Delivery_Boy
FROM customers c
JOIN orders o
    ON c.customer_id = o.customer_id
JOIN order_items oi
    ON o.order_id = oi.order_id
JOIN pizzas p
    ON oi.pizza_id = p.pizza_id
JOIN deliveries d
    ON o.order_id = d.order_id
JOIN employees e
    ON d.employee_id = e.employee_id
WHERE e.role = 'Delivery Boy';

-- Q2. Find employees who delivered pizzas in Mumbai.
SELECT DISTINCT 
    e.employee_id, 
    e.name, 
    e.role, 
    c.city
FROM employees e
JOIN deliveries d
    ON e.employee_id = d.employee_id
JOIN orders o
    ON d.order_id = o.order_id
JOIN customers c
    ON o.customer_id = c.customer_id
WHERE c.city = 'Mumbai';

-- Q3. Show total revenue handled by each employee.
SELECT 
	d.employee_id, 
	SUM(p.price * oi.quantity) AS Total_Revenue
FROM deliveries d
JOIN orders o
	ON d.order_id = o.order_id
JOIN order_items oi
	ON o.order_id = oi.order_id
JOIN pizzas p
	ON oi.pizza_id = p.pizza_id
GROUP BY d.employee_id;

-- Q4. List pizzas delivered and customers who received them.
SELECT 
    p.pizza_name,
    CONCAT(c.first_name, ' ', c.last_name) AS FullName,
    oi.quantity,
    d.status
FROM pizzas p
JOIN order_items oi
    ON p.pizza_id = oi.pizza_id
JOIN orders o
    ON oi.order_id = o.order_id
JOIN customers c
    ON o.customer_id = c.customer_id
JOIN deliveries d
    ON o.order_id = d.order_id
WHERE d.status = 'Delivered';
    
-- Q5. Show employees who never delivered an order.
SELECT e.employee_id, e.name FROM employees e
WHERE e.employee_id NOT IN (SELECT  
							d.employee_id
							FROM deliveries d);
                            
SELECT DISTINCT
	e.employee_id, 
    e.name 
FROM employees e
LEFT JOIN deliveries d 
	ON e.employee_id = d.employee_id
WHERE d.employee_id IS NULL;
                        
-- Q6. Find customers who ordered pizza where chefs earning more than 40,000.
SELECT DISTINCT 
    CONCAT(c.first_name, ' ', c.last_name) AS Cust_Name,
    e.name AS Chef_Name,
    e.role,
    e.salary
FROM customers c
JOIN orders o
    ON c.customer_id = o.customer_id
CROSS JOIN employees e
WHERE e.role = 'Chef' 
  AND e.salary > 40000;

-- Q7. Show orders with customer city, pizza_name, and delivery status.
SELECT 
	c.city,
    p.pizza_name,
    d.status
FROM pizzas p
JOIN order_items oi
	ON p.pizza_id = oi.pizza_id
JOIN orders o
	ON oi.order_id = o.order_id
JOIN customers c
	ON o.customer_id = c.customer_id
JOIN deliveries d
	ON d.order_id = o.order_id;

-- Q8. Find which employee handled the most orders.
SELECT 
    d.employee_id,
    COUNT(DISTINCT d.order_id) AS Total_Orders
FROM deliveries d
GROUP BY d.employee_id
ORDER BY Total_Orders DESC
LIMIT 1;

-- Q9. Show employee salary along with number of deliveries made.
SELECT 
	e.employee_id,
    e.name,
    e.salary,
    COUNT(d.delivery_id) AS deliveries
FROM employees e
LEFT JOIN deliveries d
ON e.employee_id = d.employee_id
GROUP BY e.employee_id, e.name, e.salary;

-- Q10. Find orders delivered late (assume delivery_time > order_date + 2 days).
SELECT 
    o.order_id,
    o.order_date,
    d.delivery_id,
    d.delivery_time
FROM orders o
JOIN deliveries d
    ON o.order_id = d.order_id
WHERE d.delivery_time > o.order_date + INTERVAL 2 DAY;

-- Q11. Show employees who delivered to more than 2 unique customers.
SELECT 
    e.employee_id,
    e.name,
    COUNT(DISTINCT d.order_id) AS No_Delivered
FROM employees e
LEFT JOIN deliveries d 
    ON e.employee_id = d.employee_id
GROUP BY e.employee_id, e.name
HAVING COUNT(DISTINCT d.order_id) > 2;

-- Q12. Show orders where delivery status was cancelled.
SELECT 
	delivery_id,
	order_id,
    status
FROM deliveries
WHERE status = 'Cancelled';

-- Q13. Find total revenue generated by each delivery boy.
SELECT 
	e.employee_id,
    e.name,
    e.role,
    SUM(COALESCE(oi.quantity * p.price, 0)) AS Revenue
FROM employees e
LEFT JOIN deliveries d
	ON e.employee_id = d.employee_id
LEFT JOIN orders o 
	ON d.order_id = o.order_id
LEFT JOIN order_items oi
	ON o.order_id = oi.order_id
LEFT JOIN pizzas p
	ON oi.pizza_id = p.pizza_id
WHERE e.role = 'Delivery Boy'
GROUP BY e.employee_id, e.name, e.role
ORDER BY Revenue DESC;

-- Q14. List employees who delivered Veg pizzas only.
SELECT e.employee_id, e.name
FROM employees e
JOIN deliveries d
    ON e.employee_id = d.employee_id
JOIN order_items oi
    ON d.order_id = oi.order_id
JOIN pizzas p
    ON oi.pizza_id = p.pizza_id
GROUP BY e.employee_id, e.name
HAVING SUM(p.category = 'Non-Veg') = 0;

-- Q15. Show customers who received Non-Veg pizzas from Kavita.
SELECT 
	CONCAT(c.first_name, ' ', c.last_name) AS Cust_Name,
    e.name,
    e.role,
    p.category,
    d.status
FROM customers c
JOIN orders o
	ON c.customer_id = o.customer_id
JOIN deliveries d
	ON o.order_id = d.order_id
JOIN employees e
	ON d.employee_id = e.employee_id
JOIN order_items oi
	ON oi.order_id = o.order_id
JOIN pizzas p
	ON p.pizza_id = oi.pizza_id
WHERE p.category = 'Non-Veg' AND e.name = 'Kavita';
	
